{{- $deploymentName := printf "%s-%s" $.Release.Name "mysql" -}}
{{- with .Values.deployments.mysql -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $deploymentName }}
  labels:
    name: {{ $deploymentName }}

spec:
  selector: 
    matchLabels:
      name: {{ $deploymentName }}
  replicas: 1
  strategy: 
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels: 
        name: {{ $deploymentName }}
    spec:
      containers:
      - name: {{ $deploymentName }}
        image: {{ .image }}:{{ .tag }}
        ports:
        - containerPort: {{ .containerPort }}
        imagePullPolicy: {{ .imagePullPolicy }}
        envFrom:
          - configMapRef:
              name: {{ $.Release.Name }}-mysql-config
        resources: {}
        livenessProbe: 
          {{- toYaml .livenessProbe | nindent 10 }}
        readinessProbe: 
          {{- toYaml .livenessProbe | nindent 10 }}
        volumeMounts:
        - name: mysql-datadir
          mountPath: /var/lib/mysql
      volumes:
        - name: mysql-datadir
          persistentVolumeClaim:
            claimName: {{ .persistence.existingClaim }}
      restartPolicy: Always
{{- end -}}